{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","schema","title","description","type","required","properties","firstName","default","lastName","age","bio","password","minLength","telephone","uiSchema","ui:autofocus","ui:emptyValue","ui:widget","ui:title","ui:description","ui:options","rows","ui:help","date","inputType","MyWidget","props","console","log","options","value","color","backgroundColor","react_default","a","createElement","style","className","defaultProps","uiSchema2","data","First","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","_ref","formData","setState","state","lib_default","onError","bind","Component","render","src_First","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yGCZAC,EAAS,CACXC,MAAS,sBACTC,YAAe,yBACfC,KAAQ,SACRC,SAAY,CACR,YACA,YAEJC,WAAc,CACVC,UAAa,CACTH,KAAQ,SACRF,MAAS,aACTM,QAAW,SAEfC,SAAY,CACRL,KAAQ,SACRF,MAAS,aAEbQ,IAAO,CACHN,KAAQ,UACRF,MAAS,iBAEbS,IAAO,CACHP,KAAQ,SACRF,MAAS,OAEbU,SAAY,CACRR,KAAQ,SACRF,MAAS,WACTW,UAAa,GAEjBC,UAAa,CACTV,KAAQ,SACRF,MAAS,YACTW,UAAa,MAInBE,EAAW,CACbR,UAAa,CACTS,gBAAgB,EAChBC,gBAAiB,IAErBP,IAAO,CACHQ,YAAa,SACbC,WAAY,gBACZC,iBAAkB,mBAEtBT,IAAO,CACHO,YAAa,WACbG,aAAc,CACVC,KAAK,IAGbV,SAAY,CACRM,YAAa,WACbK,UAAW,yBAEfC,KAAQ,CACJN,YAAa,gBAEjBJ,UAAa,CACTO,aAAc,CACVI,UAAa,SAKzB,SAASC,EAASC,GACdC,QAAQC,IAAIF,GADS,IAEdG,EAAkBH,EAAlBG,QAASC,EAASJ,EAATI,MACTC,EAA0BF,EAA1BE,MAAOC,EAAmBH,EAAnBG,gBACd,OAAQC,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAACL,QAAOC,mBAAkBK,UAAU,yBAAyBP,GAEnFL,EAASa,aAAe,CACpBT,QAAS,CACLE,MAAO,UACPC,gBAAgB,cAGxB,IAAMO,EAAY,CACdjC,UAAa,CACTW,YAAaQ,GAEjBjB,SAAY,CACRS,YAAaQ,GAEjBhB,IAAO,CACHQ,YAAaQ,GAEjBf,IAAO,CACHO,YAAaQ,GAEjBd,SAAY,CACRM,YAAaQ,GAEjBF,KAAQ,CACJN,YAAaQ,GAEjBZ,UAAa,CACTI,YAAaQ,IAIfe,EAAO,CACTlC,UAAa,QACbE,SAAY,SACZC,IAAO,IACPC,IAAO,sCACPC,SAAY,UAKV8B,cACF,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnB,KAGVuB,SAAW,SAAAC,GAAgB,IAAdC,EAAcD,EAAdC,SACTT,EAAKU,SAAS,CAACD,aACfxB,QAAQC,IAAI,mBAAqBuB,IAJjCT,EAAKW,MAAQ,CAACF,SAASX,GAFRE,wEAQV,IAXAvC,EAYEgD,EAAYN,KAAKQ,MAAjBF,SACP,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAMG,UAAU,MACVrC,OAAQA,EACRc,SAAUA,EACVqC,SAAUA,EACVF,SAAUJ,KAAKI,SACfM,SArBbpD,EAqB0B,SArBjBwB,QAAQC,IAAI4B,KAAK7B,QAASxB,MAsB5B8B,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAMG,UAAU,MACVrC,OAAQA,EAAQc,SAAUyB,EAAWY,SAAUA,aArBrDM,aA2BpBC,iBAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAAUC,SAASC,eAAe,SDlBnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2990c48a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as serviceWorker from './serviceWorker';\n\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Form from \"react-jsonschema-form\";\n\nconst schema = {\n    \"title\": \"A registration form\",\n    \"description\": \"A simple form example.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"firstName\",\n        \"lastName\"\n    ],\n    \"properties\": {\n        \"firstName\": {\n            \"type\": \"string\",\n            \"title\": \"First name\",\n            \"default\": \"Chuck\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"title\": \"Last name\"\n        },\n        \"age\": {\n            \"type\": \"integer\",\n            \"title\": \"Age of person\"\n        },\n        \"bio\": {\n            \"type\": \"string\",\n            \"title\": \"Bio\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"title\": \"Password\",\n            \"minLength\": 3\n        },\n        \"telephone\": {\n            \"type\": \"string\",\n            \"title\": \"Telephone\",\n            \"minLength\": 10\n        }\n    }\n};\nconst uiSchema = {\n    \"firstName\": {\n        \"ui:autofocus\": true,\n        \"ui:emptyValue\": \"\"\n    },\n    \"age\": {\n        \"ui:widget\": \"updown\",\n        \"ui:title\": \"Age of person\",\n        \"ui:description\": \"(earthian year)\"\n    },\n    \"bio\": {\n        \"ui:widget\": \"textarea\",\n        \"ui:options\": {\n            rows:4\n        }\n    },\n    \"password\": {\n        \"ui:widget\": \"password\",\n        \"ui:help\": \"Hint: Make it strong!\"\n    },\n    \"date\": {\n        \"ui:widget\": \"alt-datetime\"\n    },\n    \"telephone\": {\n        \"ui:options\": {\n            \"inputType\": \"tel\"\n        }\n    }\n};\n\nfunction MyWidget(props) {\n    console.log(props)\n    const {options, value} = props;\n    const {color, backgroundColor} = options;\n    return (<p style={{color, backgroundColor}} className=\"alert alert-secondary\">{value}</p>);\n}\nMyWidget.defaultProps = {\n    options: {\n        color: \"#17a2b8\",\n        backgroundColor:\"lightGrey\"\n    }\n};\nconst uiSchema2 = {\n    \"firstName\": {\n        \"ui:widget\": MyWidget\n    },\n    \"lastName\": {\n        \"ui:widget\": MyWidget\n    },\n    \"age\": {\n        \"ui:widget\": MyWidget\n    },\n    \"bio\": {\n        \"ui:widget\": MyWidget\n    },\n    \"password\": {\n        \"ui:widget\": MyWidget\n    },\n    \"date\": {\n        \"ui:widget\": MyWidget\n    },\n    \"telephone\": {\n        \"ui:widget\": MyWidget\n    }\n};\n\nconst data = {\n    \"firstName\": \"Chuck\",\n    \"lastName\": \"Norris\",\n    \"age\": 105,\n    \"bio\": \"Roundhouse kicking asses since 1940\",\n    \"password\": \"noneed\"\n};\n\nconst log = (type) => console.log.bind(console, type);\n\nclass First extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {formData:data};\n    }\n    onChange = ({formData}) => {\n        this.setState({formData});\n        console.log(\"Data submitted: \",  formData);\n    };\n    render() {\n        const {formData} = this.state;\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Form className=\"col\"\n                          schema={schema}\n                          uiSchema={uiSchema}\n                          formData={formData}\n                          onChange={this.onChange}\n                          onError={log(\"errors\")} />\n                    <Form className=\"col\"\n                          schema={schema} uiSchema={uiSchema2} formData={formData}/>\n                </div>\n            </div>)\n    }\n}\n\nrender(<First/>, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}